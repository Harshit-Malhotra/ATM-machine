import tkinter as tk
from tkinter import messagebox

class InputDialog(tk.Toplevel):
    def __init__(self, parent, title, prompt):
        super().__init__(parent)
        self.title(title)

        self.result = None

        label = tk.Label(self, text=prompt)
        label.pack(padx=10, pady=10)

        self.entry = tk.Entry(self)
        self.entry.pack(padx=10, pady=10)

        ok_button = tk.Button(self, text="OK", command=self.ok)
        ok_button.pack(pady=10)

    def ok(self):
        self.result = self.entry.get()
        self.destroy()

class ATM:
    def __init__(self, atm_id, balance=0, pin=None, transaction_limit=3, daily_transaction_limit=5, bank="Default Bank"):
        self.atm_id = atm_id
        self.balance = balance
        self.pin = pin
        self.transaction_count = 0
        self.daily_transaction_count = 0
        self.transaction_limit = transaction_limit
        self.daily_transaction_limit = daily_transaction_limit
        self.bank = bank

    def check_balance(self):
        messagebox.showinfo("Balance", f"ATM Balance: ${self.balance}")

    def withdraw(self, amount, user_balance, user_bank):
        if self.transaction_count >= self.transaction_limit or self.daily_transaction_count >= self.daily_transaction_limit:
            return "Transaction limit exceeded. Cannot perform withdrawal."

        elif amount > user_balance:
            return "Insufficient funds."
        else:
            # Apply 5% fee only if the user withdraws from an ATM other than their bank
            if self.bank != user_bank:
                amount_with_fee = amount + (amount * 0.05)
            else:
                amount_with_fee = amount

            user_balance -= amount_with_fee
            self.transaction_count += 1
            self.daily_transaction_count += 1
            self.balance += amount  # Add the withdrawn amount to the ATM's balance
            return f"Withdrawal successful. Amount withdrawn: ${amount}, Current balance: ${user_balance}"

    def deposit(self, amount, user_balance):
        user_balance += amount
        self.transaction_count += 1
        self.daily_transaction_count += 1
        self.balance += amount  # Add the deposited amount to the ATM's balance
        return f"Deposit successful. Amount deposited: ${amount}, Current user balance: ${user_balance}"

    def change_pin(self, new_pin):
        self.pin = new_pin
        return "PIN changed successfully."

    def add_money_to_atm(self, amount):
        self.balance += amount
        return f"Money added to ATM. New ATM balance: ${self.balance}"

class ATMGUI(tk.Tk):
    def __init__(self, users, atms):
        super().__init__()

        self.users = users
        self.atms = atms
        self.user = None
        self.atm = None
        self.cache = {}

        self.title("ATM Machine")
        self.geometry("400x300")

        self.create_widgets()

    def create_widgets(self):
        label = tk.Label(self, text="Welcome to the ATM Machine", font=("Helvetica", 16))
        label.pack(pady=10)

        card_number_label = tk.Label(self, text="Card Number:")
        card_number_label.pack()
        self.card_number_entry = tk.Entry(self)
        self.card_number_entry.pack()

        pin_label = tk.Label(self, text="PIN:")
        pin_label.pack()
        self.pin_entry = tk.Entry(self, show="*")
        self.pin_entry.pack()

        bank_label = tk.Label(self, text="Select Bank:")
        bank_label.pack()
        self.bank_entry = tk.Entry(self)
        self.bank_entry.pack()

        login_button = tk.Button(self, text="Login", command=self.login)
        login_button.pack(pady=10)

        exit_button = tk.Button(self, text="Exit", command=self.destroy)
        exit_button.pack(pady=10)

    def login(self):
        card_number = self.card_number_entry.get()
        pin = self.pin_entry.get()
        bank = self.bank_entry.get()

        if not card_number or not pin or not bank:
            messagebox.showerror("Error", "Please enter card number, PIN, and select a bank.")
            return

        user = self.find_user(card_number, pin)
        atm = self.select_atm(bank)

        if not user or not atm:
            messagebox.showerror("Error", "Invalid user or ATM selection.")
            return

        self.user = user
        self.atm = atm

        self.show_menu()

    def find_user(self, card_number, pin):
        for user_id, user_info in self.users.items():
            if user_info['card_number'] == card_number and user_info['pin'] == int(pin):
                return user_info
        return None

    def select_atm(self, bank):
        for atm_id, atm_instance in self.atms.items():
            if atm_instance.bank == bank:
                return atm_instance

        messagebox.showerror("Error", f"No ATM available for the selected bank: {bank}")
        return None

    def show_menu(self):
        self.clear_widgets()

        menu_label = tk.Label(self, text="Menu", font=("Helvetica", 14))
        menu_label.pack(pady=10)

        check_balance_button = tk.Button(self, text="Check Balance", command=self.check_balance)
        check_balance_button.pack()

        withdraw_button = tk.Button(self, text="Withdraw", command=self.withdraw)
        withdraw_button.pack()

        deposit_button = tk.Button(self, text="Deposit", command=self.deposit)
        deposit_button.pack()

        change_pin_button = tk.Button(self, text="Change PIN", command=self.change_pin)
        change_pin_button.pack()

        if self.user['role'] == 'employee':
            add_money_button = tk.Button(self, text="Add Money to ATM", command=self.add_money_to_atm)
            add_money_button.pack()

        exit_button = tk.Button(self, text="Exit", command=self.destroy)
        exit_button.pack(pady=10)

    def check_balance(self):
        messagebox.showinfo("Balance", f"User Balance: ${self.user['balance']}, ATM Balance: ${self.atm.balance}")

    def withdraw(self):
        if self.user['role'] == 'customer':
            amount_dialog = InputDialog(self, "Withdraw", "Enter the amount to withdraw:")
            self.wait_window(amount_dialog)
            amount = amount_dialog.result

            if amount is not None and amount.isdigit():
                amount = float(amount)
                withdrawal_result = self.atm.withdraw(amount, self.user['balance'], self.user['bank'])
                messagebox.showinfo("Withdrawal", withdrawal_result)
                self.user['balance'] -= amount
        else:
            messagebox.showinfo("Withdrawal", "Employee cannot perform withdrawals.")

    def deposit(self):
        if self.user['role'] == 'customer':
            amount_dialog = InputDialog(self, "Deposit", "Enter the amount to deposit:")
            self.wait_window(amount_dialog)
            amount = amount_dialog.result

            if amount is not None and amount.isdigit():
                amount = float(amount)
                deposit_result = self.atm.deposit(amount, self.user['balance'])
                messagebox.showinfo("Deposit", deposit_result)
                self.user['balance'] += amount
        else:
            messagebox.showinfo("Deposit", "Employee cannot perform deposits.")

    def change_pin(self):
        new_pin_dialog = InputDialog(self, "Change PIN", "Enter your new PIN:")
        self.wait_window(new_pin_dialog)
        new_pin = new_pin_dialog.result

        if new_pin is not None and new_pin.isdigit():
            change_pin_result = self.atm.change_pin(new_pin)
            messagebox.showinfo("Change PIN", change_pin_result)

    def add_money_to_atm(self):
        amount_dialog = InputDialog(self, "Add Money to ATM", "Enter the amount to add to the ATM:")
        self.wait_window(amount_dialog)
        amount = amount_dialog.result

        if amount is not None and amount.isdigit():
            amount = float(amount)
            add_money_result = self.atm.add_money_to_atm(amount)
            messagebox.showinfo("Add Money to ATM", add_money_result)

    def clear_widgets(self):
        for widget in self.winfo_children():
            widget.destroy()

def main():
    users = {
        'user1': {'card_number': '1111', 'pin': 1234, 'balance': 1000, 'bank': 'BankA', 'role': 'customer'},
        'user2': {'card_number': '2222', 'pin': 5678, 'balance': 1500, 'bank': 'BankB', 'role': 'customer'},
        'employee1': {'card_number': '3333', 'pin': 9999, 'balance': 0, 'bank': 'BankA', 'role': 'employee'},
        'employee2': {'card_number': '4444', 'pin': 8888, 'balance': 0, 'bank': 'BankB', 'role': 'employee'}
    }

    atms = {
        'ATM001': ATM(atm_id='ATM001', balance=10000, pin=1234, transaction_limit=3, daily_transaction_limit=5, bank="BankA"),
        'ATM002': ATM(atm_id='ATM002', balance=15000, pin=5678, transaction_limit=3, daily_transaction_limit=5, bank="BankB")
    }

    app = ATMGUI(users, atms)
    app.mainloop()

if __name__ == "__main__":
    main()

